var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ForwardBackward","category":"page"},{"location":"#ForwardBackward.jl","page":"Home","title":"ForwardBackward.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ForwardBackward.jl is a Julia package for endpoint-conditioned sampling and interpolation of stochastic processes. It provides a framework for generating paths between two states that respect the underlying dynamics of various processes.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package allows you to:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Define different types of stochastic processes (continuous and discrete)\nRepresent states and their likelihoods\nPerform forward and backward propagation of distributions\nGenerate endpoint-conditioned samples between two states","category":"page"},{"location":"#Core-Concepts","page":"Home","title":"Core Concepts","text":"","category":"section"},{"location":"#Processes","page":"Home","title":"Processes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package supports several types of processes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Continuous State Processes\nBrownianMotion: Standard Brownian motion with drift δ and variance v\nOrnsteinUhlenbeck: OU process with mean μ, variance v, and mean reversion rate θ\nDiscrete State Processes\nUniformDiscrete: Uniform switching rates between states\nUniformUnmasking: A process that unmasks states\nPiQ: A switching event that switches to each state proportionally to the stationary distribution\nGeneralDiscrete: A process with arbitrary transition rate matrix\nManifold Processes\nManifoldProcess: A process on a manifold with drift variance v","category":"page"},{"location":"#States-and-Likelihoods","page":"Home","title":"States and Likelihoods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A State is a collection of values (with flexible dimensionality).States can be either discrete, continuous, or points on a manifold:","category":"page"},{"location":"","page":"Home","title":"Home","text":"state = DiscreteState(4, rand(1:4, 100))  # 100 states with 4 possible values\n\nstate = ContinuousState(randn(100))  # 100 continuous values\n\nM = ForwardBackward.Sphere(2)\nstate = ManifoldState(M, rand(M, 100))  # 100 points on a sphere","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Likelihood is a distribution and a log-normalization constant. DiscreteStates have a CategoricalLikelihood representation, and ContinuousStates have a GaussianLikelihood representation. These support the propogation of uncertainty under the processes. ManifoldStates do not have a likelihood representation, and endpoint-conditioned sampling is done via a approximate simulation.","category":"page"},{"location":"#Endpoint-Conditioned-Sampling","page":"Home","title":"Endpoint-Conditioned Sampling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Endpoint-conditioned sampling is the draw of a sample from a process that is conditioned to start and end at specified states (or state likelihoods, where supported). This is achieved through:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Forward propagation from the initial state\nBackward propagation from the final state\nCombining the likelihoods using the pointwise product (⊙)\nSampling from the combined likelihood","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Example for continuous process\nX0 = ContinuousState(zeros(10))  # Initial state\nX1 = ContinuousState(ones(10))   # Final state\nprocess = BrownianMotion()  # Standard Brownian motion\n\n# Generate a sample at t=0.3 given endpoints at t=0 and t=1\nt = 0.3\nsample = endpoint_conditioned_sample(X0, X1, process, t)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For states with likelihoods, the endpoint-conditioned sampling first explicitly constructs a distribution over Xt via:","category":"page"},{"location":"","page":"Home","title":"Home","text":"P(Xt | X0, X1) ∝ P(Xt | X0) × P(X1 | Xt)","category":"page"},{"location":"","page":"Home","title":"Home","text":"where:","category":"page"},{"location":"","page":"Home","title":"Home","text":"P(Xt | X0), considered as a function of Xt, is computed by forward propagation\nP(X1 | Xt), considered as a function of Xt, is computed by backward propagation\n× represents pointwise multiplication of likelihoods.","category":"page"},{"location":"#Usage-Examples","page":"Home","title":"Usage Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ForwardBackward\n\n# Brownian Motion example\nprocess = BrownianMotion(0.0, 1.0)\nX0 = ContinuousState(zeros(10))\nX1 = ContinuousState(ones(10))\nt = 0.3\n\n# Forward propagation\nforward_dist = forward(X0, process, t)\n\n# Backward propagation\nbackward_dist = backward(X1, process, 1-t)\n\n# Combine distributions and sample\nsample = rand(forward_dist ⊙ backward_dist)\n\n# Or use the convenience function\nsample = endpoint_conditioned_sample(X0, X1, process, t)","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ForwardBackward]","category":"page"},{"location":"#ForwardBackward.BrownianMotion","page":"Home","title":"ForwardBackward.BrownianMotion","text":"BrownianMotion(δ::Real, v::Real)\nBrownianMotion()\n\nBrownian motion process with drift δ and variance v.\n\nParameters\n\nδ: Drift parameter (default: 0.0)\nv: Variance parameter (default: 1.0)\n\nExamples\n\n# Standard Brownian motion\nprocess = BrownianMotion()\n\n# Brownian motion with drift 0.5 and variance 2.0\nprocess = BrownianMotion(0.5, 2.0)\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.CategoricalLikelihood","page":"Home","title":"ForwardBackward.CategoricalLikelihood","text":"CategoricalLikelihood(dist::AbstractArray, log_norm_const::AbstractArray)\nCategoricalLikelihood(K::Int, dims...; T=Float64)\nCategoricalLikelihood(dist::AbstractArray)\n\nProbability distribution over discrete states.\n\nParameters\n\ndist: Probability masses for each state\nlog_norm_const: Log normalization constants\nK: Number of categories (for initialization)\ndims: Additional dimensions for initialization\nT: Numeric type (default: Float64)\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.ContinuousProcess","page":"Home","title":"ForwardBackward.ContinuousProcess","text":"abstract type ContinuousProcess <: Process end\n\nBase type for processes with continuous state spaces.\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.ContinuousState","page":"Home","title":"ForwardBackward.ContinuousState","text":"ContinuousState(state::AbstractArray{<:Real})\n\nRepresentation of continuous states.\n\nParameters\n\nstate: Array of current state values\n\nExamples\n\n# Create a continuous state\nstate = ContinuousState(randn(100))\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.Deterministic","page":"Home","title":"ForwardBackward.Deterministic","text":"Deterministic()\n\nA deterministic process where endpoint conditioning results in linear interpolation between states.\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.DiscreteProcess","page":"Home","title":"ForwardBackward.DiscreteProcess","text":"abstract type DiscreteProcess <: Process end\n\nBase type for processes with discrete state spaces.\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.GaussianLikelihood","page":"Home","title":"ForwardBackward.GaussianLikelihood","text":"GaussianLikelihood(mu::AbstractArray, var::AbstractArray, log_norm_const::AbstractArray)\n\nGaussian probability distribution over continuous states.\n\nParameters\n\nmu: Mean values\nvar: Variances\nlog_norm_const: Log normalization constants\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.GeneralDiscrete","page":"Home","title":"ForwardBackward.GeneralDiscrete","text":"GeneralDiscrete(Q::Matrix)\n\nDiscrete process with arbitrary transition rate matrix Q.\n\nParameters\n\nQ: Transition rate matrix\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.ManifoldProcess","page":"Home","title":"ForwardBackward.ManifoldProcess","text":"ManifoldProcess(v::T)\nManifoldProcess()\n\nA stochastic process on a Riemannian manifold with drift variance v.\n\nParameters\n\nv: Drift variance parameter (default: 0)\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.ManifoldState","page":"Home","title":"ForwardBackward.ManifoldState","text":"ManifoldState{Q<:AbstractManifold,A<:AbstractArray}(state::A, M::Q)\nManifoldState(M::AbstractManifold, state::AbstractArray{<:AbstractArray})\n\nRepresents a state on a Riemannian manifold.\n\nParameters\n\nstate: Array of points on the manifold\nM: The manifold object\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.OrnsteinUhlenbeck","page":"Home","title":"ForwardBackward.OrnsteinUhlenbeck","text":"OrnsteinUhlenbeck(μ::Real, v::Real, θ::Real)\nOrnsteinUhlenbeck()\n\nOrnstein-Uhlenbeck process with mean μ, variance v, and mean reversion rate θ.\n\nParameters\n\nμ: Long-term mean (default: 0.0)\nv: Variance parameter (default: 1.0)\nθ: Mean reversion rate (default: 1.0)\n\nExamples\n\n# Standard OU process\nprocess = OrnsteinUhlenbeck()\n\n# OU process with custom parameters\nprocess = OrnsteinUhlenbeck(1.0, 0.5, 2.0)\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.PiQ","page":"Home","title":"ForwardBackward.PiQ","text":"PiQ(r::Real, π::Vector{<:Real}; normalize=true)\nPiQ(π::Vector{<:Real}; normalize=true)\n\nDiscrete process that switches to states proportionally to the stationary distribution π with rate r.\n\nParameters\n\nr: Overall switching rate (default: 1.0)\nπ: Target stationary distribution (will always be normalized to sum to 1)\nnormalize: Whether to normalize the expected substitutions per unit time to be 1 when r = 1 (default: true)\n\nExamples\n\n# Process with uniform stationary distribution\nprocess = PiQ(ones(4) ./ 4)\n\n# Process with custom stationary distribution and rate\nprocess = PiQ(2.0, [0.1, 0.2, 0.3, 0.4])\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.Process","page":"Home","title":"ForwardBackward.Process","text":"abstract type Process end\n\nBase type for all stochastic processes in the package.\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.State","page":"Home","title":"ForwardBackward.State","text":"abstract type State end\n\nBase type for all state representations.\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.StateLikelihood","page":"Home","title":"ForwardBackward.StateLikelihood","text":"abstract type StateLikelihood end\n\nBase type for probability distributions over states.\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.UniformDiscrete","page":"Home","title":"ForwardBackward.UniformDiscrete","text":"UniformDiscrete(μ::Real)\nUniformDiscrete()\n\nDiscrete process with uniform transition rates between states, scaled by μ.\n\nParameters\n\nμ: Rate scaling parameter (default: 1.0)\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.UniformUnmasking","page":"Home","title":"ForwardBackward.UniformUnmasking","text":"UniformUnmasking(μ::Real)\nUniformUnmasking()\n\nMutates only a mask (the last state index) to any other state (with equal rates). When everything is masked,  μ=1 corresponds to one substitution per unit time.\n\nParameters\n\nμ: Rate parameter (default: 1.0)\n\n\n\n\n\n","category":"type"},{"location":"#ForwardBackward.:⊙-Tuple{CategoricalLikelihood, CategoricalLikelihood}","page":"Home","title":"ForwardBackward.:⊙","text":"⊙(a::CategoricalLikelihood, b::CategoricalLikelihood; norm=true)\n⊙(a::GaussianLikelihood, b::GaussianLikelihood)\n\nCompute the pointwise product of two likelihood distributions. For Gaussian likelihoods, this results in another Gaussian. For categorical likelihoods, this results in another categorical distribution.\n\nParameters\n\na, b: Input likelihood distributions\nnorm: Whether to normalize the result (categorical only, default: true)\n\nReturns\n\nA new likelihood distribution of the same type as the inputs.\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.backward!-Tuple{ForwardBackward.StateLikelihood, ForwardBackward.State, ForwardBackward.Process, Any}","page":"Home","title":"ForwardBackward.backward!","text":"backward!(Xdest::StateLikelihood, Xt::State, process::Process, t)\nbackward(Xt::StateLikelihood, process::Process, t)\nbackward(Xt::State, process::Process, t)\n\nPropagate a state or likelihood backward in time according to the process dynamics.\n\nParameters\n\nXdest: Destination for in-place operation\nXt: Final state or likelihood\nprocess: The stochastic process\nt: Time to propagate backward\n\nReturns\n\nThe backward-propagated state or likelihood\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.endpoint_conditioned_sample-NTuple{5, Any}","page":"Home","title":"ForwardBackward.endpoint_conditioned_sample","text":"endpoint_conditioned_sample(X0, X1, p, tF, tB)\nendpoint_conditioned_sample(X0, X1, p, t)\nendpoint_conditioned_sample(X0, X1, p::Deterministic, tF, tB)\n\nGenerate a sample from the endpoint-conditioned process.\n\nParameters\n\nX0: Initial state\nX1: Final state\np: The stochastic process\nt, tF: Forward time\ntB: Backward time (defaults to 1-t for single time parameter)\n\nReturns\n\nA sample from the endpoint-conditioned distribution\n\nNotes\n\nFor continuous processes, uses the forward-backward algorithm. For deterministic processes, uses linear interpolation.\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.endpoint_conditioned_sample-Tuple{ManifoldState, ManifoldState, ManifoldProcess, Any, Any}","page":"Home","title":"ForwardBackward.endpoint_conditioned_sample","text":"endpoint_conditioned_sample(X0::ManifoldState, X1::ManifoldState, p::ManifoldProcess, tF, tB; Δt = 0.05)\n\nGenerate a sample from the endpoint-conditioned process on a manifold.\n\nParameters\n\nX0: Initial state\nX1: Final state\np: The manifold process\ntF: Forward time\ntB: Backward time\nΔt: Discretized step size (default: 0.05)\n\nReturns\n\nA sample state at the specified time\n\nNotes\n\nUses a numerical stepping procedure to approximate the endpoint-conditioned distribution.\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.forward!-Tuple{ForwardBackward.StateLikelihood, ForwardBackward.State, ForwardBackward.Process, Any}","page":"Home","title":"ForwardBackward.forward!","text":"forward!(Xdest::StateLikelihood, Xt::State, process::Process, t)\nforward(Xt::StateLikelihood, process::Process, t)\nforward(Xt::State, process::Process, t)\n\nPropagate a state or likelihood forward in time according to the process dynamics.\n\nParameters\n\nXdest: Destination for in-place operation\nXt: Initial state or likelihood\nprocess: The stochastic process\nt: Time to propagate forward\n\nReturns\n\nThe forward-propagated state or likelihood\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.interpolate!-Tuple{ManifoldState, ManifoldState, ManifoldState, Any, Any}","page":"Home","title":"ForwardBackward.interpolate!","text":"interpolate!(dest::ManifoldState, X0::ManifoldState, Xt::ManifoldState, tF, tB)\ninterpolate(X0::ManifoldState, Xt::ManifoldState, tF, tB)\n\nInterpolate between two states on a manifold using geodesics.\n\nParameters\n\ndest: Destination state for in-place operation\nX0: Initial state\nXt: Final state\ntF: Time difference from initial state\ntB: Time difference to final state\n\nReturns\n\nThe interpolated state\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.interpolate-Tuple{ContinuousState, ContinuousState, Any, Any}","page":"Home","title":"ForwardBackward.interpolate","text":"interpolate(X0::ContinuousState, X1::ContinuousState, tF, tB)\n\nLinearly interpolate between two continuous states.\n\nParameters\n\nX0: Initial state\nX1: Final state\ntF: Forward time\ntB: Backward time\n\nReturns\n\nThe interpolated state\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.perturb!-Tuple{ManifoldsBase.AbstractManifold, Any, Any, Any}","page":"Home","title":"ForwardBackward.perturb!","text":"perturb!(M::AbstractManifold, q, p, v)\nperturb(M::AbstractManifold, p, v)\n\nPerturb a point p on manifold M by sampling from a normal distribution in the tangent space with variance v and exponentiating back to the manifold.\n\nParameters\n\nM: The manifold\nq: The point that is overwritten (for perturb!)\np: Original point\nv: Variance of perturbation\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.perturb-Tuple{ManifoldsBase.AbstractManifold, Any, Any}","page":"Home","title":"ForwardBackward.perturb","text":"perturb!(M::AbstractManifold, q, p, v)\nperturb(M::AbstractManifold, p, v)\n\nPerturb a point p on manifold M by sampling from a normal distribution in the tangent space with variance v and exponentiating back to the manifold.\n\nParameters\n\nM: The manifold\nq: The point that is overwritten (for perturb!)\np: Original point\nv: Variance of perturbation\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.step_toward!-Tuple{ManifoldsBase.AbstractManifold, Vararg{Any, 6}}","page":"Home","title":"ForwardBackward.step_toward!","text":"step_toward!(M::AbstractManifold, dest, p, q, var, delta_t, remaining_t)\nstep_toward(M::AbstractManifold, p, q, var, delta_t, remaining_t)\n\nTake a single diffusion step from point p toward point q on manifold M. If var is 0, this is a deterministic step along the geodesic.\n\nParameters\n\nM: The manifold\ndest: Destination for the new point\np: Starting point\nq: Target point\nvar: Variance of stochastic perturbation\ndelta_t: Time step size\nremaining_t: Total remaining time\n\nReturns\n\nThe new point after stepping\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.stochastic-Tuple{Type, ContinuousState}","page":"Home","title":"ForwardBackward.stochastic","text":"stochastic(o::State)\nstochastic(T::Type, o::State)\n\nConvert a state to its corresponding likelihood distribution: A zero-variance (ie. delta function) Gaussian for the continuous case, and a one-hot categorical distribution for the discrete case.\n\nParameters\n\no: Input state\nT: Numeric type for the resulting distribution (default: Float64)\n\nReturns\n\nA likelihood distribution corresponding to the input state.\n\n\n\n\n\n","category":"method"},{"location":"#ForwardBackward.tensor-Tuple{ForwardBackward.State}","page":"Home","title":"ForwardBackward.tensor","text":"tensor(d::Union{State, StateLikelihood})\n\nConvert a state or likelihood to its tensor (ie. multidimensional array) representation.\n\nReturns\n\nThe underlying array representation of the state or likelihood.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"```","category":"page"}]
}
